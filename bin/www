#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pliky:server');
var http = require('http');
var socketFunction = require('../socket');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var io = require('socket.io').listen(server);

io.on('connection', function (socket) {
    socket.on('heartPlus', function (data) {
        var userId = data.userId;
        var csId = data.csId;
        socketFunction.heartPlus(csId, userId);
    });
    socket.on('cancelHeartPlus', function(data) {
        socketFunction.cancelHeartPlus(data.csId, data.userId);
    });
    socket.on('viewPlus', function(data) {
        socketFunction.viewPlus(data.csId);
    });
    socket.on('csAlarmPlus', function(data) {
        socketFunction.csAlarmPlus(data.csId, data.userId);
    });
    socket.on('cancelCsAlarmPlus', function(data) {
        socketFunction.cancelCsAlarmPlus(data.csId, data.userId);
    });
    socket.on('followPlus', function(data) {
        socketFunction.followPlus(data.creatorId, data.userId);
    });
    socket.on('followMinus', function(data) {
        socketFunction.followMinus(data.creatorId, data.userId);
    });
    socket.on('newComment', function(data) {
        socketFunction.newComment(data.csId, data.userId, data.comment);
    });
    socket.on('getCommentsId', function(data) {
        socketFunction.getCommentsId(data.csId);
    });
    socket.on('newReply', function(data) {
        socketFunction.newReply(data.csId, data.commentId, data.reply);
    });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
